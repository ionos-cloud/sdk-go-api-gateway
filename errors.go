// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	core "go-mod-path/generated/go/core"
)

// ### Bad Request
// The request send to the API was malformed.
type BadRequestError struct {
	*core.APIError
	Body *Error
}

func (b *BadRequestError) UnmarshalJSON(data []byte) error {
	var body *Error
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	b.StatusCode = 400
	b.Body = body
	return nil
}

func (b *BadRequestError) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.Body)
}

func (b *BadRequestError) Unwrap() error {
	return b.APIError
}

// ### Conflict
// The UUID is already taken by another party, follow the guides to generate UUIDs uniquely.
type ConflictError struct {
	*core.APIError
	Body *Error
}

func (c *ConflictError) UnmarshalJSON(data []byte) error {
	var body *Error
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	c.StatusCode = 409
	c.Body = body
	return nil
}

func (c *ConflictError) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.Body)
}

func (c *ConflictError) Unwrap() error {
	return c.APIError
}

// ### Not Allowed
// The user issuing the request does not have the needed permissions.
type ForbiddenError struct {
	*core.APIError
	Body *Error
}

func (f *ForbiddenError) UnmarshalJSON(data []byte) error {
	var body *Error
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	f.StatusCode = 403
	f.Body = body
	return nil
}

func (f *ForbiddenError) MarshalJSON() ([]byte, error) {
	return json.Marshal(f.Body)
}

func (f *ForbiddenError) Unwrap() error {
	return f.APIError
}

// ### Internal Server Error
// An internal error occurred. We apologize for the inconvenience!
type InternalServerError struct {
	*core.APIError
	Body *Error
}

func (i *InternalServerError) UnmarshalJSON(data []byte) error {
	var body *Error
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	i.StatusCode = 500
	i.Body = body
	return nil
}

func (i *InternalServerError) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.Body)
}

func (i *InternalServerError) Unwrap() error {
	return i.APIError
}

// ### Not Found
// The resource that was requested could not be found.
type NotFoundError struct {
	*core.APIError
	Body *Error
}

func (n *NotFoundError) UnmarshalJSON(data []byte) error {
	var body *Error
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	n.StatusCode = 404
	n.Body = body
	return nil
}

func (n *NotFoundError) MarshalJSON() ([]byte, error) {
	return json.Marshal(n.Body)
}

func (n *NotFoundError) Unwrap() error {
	return n.APIError
}

// ### Service Unavailable
// The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.
type ServiceUnavailableError struct {
	*core.APIError
	Body *Error
}

func (s *ServiceUnavailableError) UnmarshalJSON(data []byte) error {
	var body *Error
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	s.StatusCode = 503
	s.Body = body
	return nil
}

func (s *ServiceUnavailableError) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.Body)
}

func (s *ServiceUnavailableError) Unwrap() error {
	return s.APIError
}

// ### Too Many Requests
// The user has sent too many requests in a given amount of time.
type TooManyRequestsError struct {
	*core.APIError
	Body *Error
}

func (t *TooManyRequestsError) UnmarshalJSON(data []byte) error {
	var body *Error
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	t.StatusCode = 429
	t.Body = body
	return nil
}

func (t *TooManyRequestsError) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.Body)
}

func (t *TooManyRequestsError) Unwrap() error {
	return t.APIError
}

// ### Unauthorized
// The request is missing authorization information or the authorization information provided are expired.
type UnauthorizedError struct {
	*core.APIError
	Body *Error
}

func (u *UnauthorizedError) UnmarshalJSON(data []byte) error {
	var body *Error
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	u.StatusCode = 401
	u.Body = body
	return nil
}

func (u *UnauthorizedError) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.Body)
}

func (u *UnauthorizedError) Unwrap() error {
	return u.APIError
}

// ### Unprocessable Entity
// The request was well-formed but was unable to be followed due to semantic errors.
type UnprocessableEntityError struct {
	*core.APIError
	Body *Error
}

func (u *UnprocessableEntityError) UnmarshalJSON(data []byte) error {
	var body *Error
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	u.StatusCode = 422
	u.Body = body
	return nil
}

func (u *UnprocessableEntityError) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.Body)
}

func (u *UnprocessableEntityError) Unwrap() error {
	return u.APIError
}

// ### Unsupported Media Type
// The request has an unsupported media type.
type UnsupportedMediaTypeError struct {
	*core.APIError
	Body *Error
}

func (u *UnsupportedMediaTypeError) UnmarshalJSON(data []byte) error {
	var body *Error
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	u.StatusCode = 415
	u.Body = body
	return nil
}

func (u *UnsupportedMediaTypeError) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.Body)
}

func (u *UnsupportedMediaTypeError) Unwrap() error {
	return u.APIError
}
